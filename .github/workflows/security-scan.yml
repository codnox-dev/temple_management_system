name: Dependency Security Scan

on:
  push:
    branches: [main, devan]
  pull_request:
    branches: [main, devan]
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggers

jobs:
  python-security:
    name: Python Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit
      
      - name: Run pip-audit
        id: pip-audit
        run: |
          cd backend
          pip-audit --format json --output pip-audit.json || true
          pip-audit --format markdown --output pip-audit.md || true
      
      - name: Check for critical vulnerabilities
        run: |
          cd backend
          # Fail if critical or high severity vulnerabilities found
          if [ -f pip-audit.json ]; then
            CRITICAL=$(cat pip-audit.json | grep -o '"critical"' | wc -l)
            HIGH=$(cat pip-audit.json | grep -o '"high"' | wc -l)
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "::error::Critical or High severity vulnerabilities found!"
              cat pip-audit.md
              exit 1
            fi
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-results
          path: |
            backend/pip-audit.json
            backend/pip-audit.md
          retention-days: 30
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('backend/pip-audit.md')) {
              const report = fs.readFileSync('backend/pip-audit.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## Python Dependency Security Audit\n\n' + report
              });
            }

  nodejs-security:
    name: Node.js Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run npm audit
        id: npm-audit
        run: |
          cd frontend
          npm audit --json > npm-audit.json || true
          npm audit > npm-audit.txt || true
      
      - name: Check for critical vulnerabilities
        run: |
          cd frontend
          # Fail if critical or high severity vulnerabilities found in production deps
          if [ -f npm-audit.json ]; then
            CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            echo "Critical: $CRITICAL, High: $HIGH"
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "::error::Critical or High severity vulnerabilities found!"
              cat npm-audit.txt
              exit 1
            fi
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-results
          path: |
            frontend/npm-audit.json
            frontend/npm-audit.txt
          retention-days: 30
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('frontend/npm-audit.txt')) {
              const report = fs.readFileSync('frontend/npm-audit.txt', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## Node.js Dependency Security Audit\n\n```\n' + report + '\n```'
              });
            }

  bandit-security:
    name: Python Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Bandit
        run: pip install bandit[toml]
      
      - name: Run Bandit
        run: |
          cd backend
          bandit -r app/ -ll -c .bandit -f json -o bandit-report.json || true
          bandit -r app/ -ll -c .bandit -f txt -o bandit-report.txt || true
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: |
            backend/bandit-report.json
            backend/bandit-report.txt
          retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, bandit-security]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Dependencies | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Node.js Dependencies | ${{ needs.nodejs-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Code Scan | ${{ needs.bandit-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See workflow artifacts for detailed reports." >> $GITHUB_STEP_SUMMARY
